import tkinter as tk
from selenium import webdriver
from selenium.webdriver.firefox.service import Service as FirefoxService
from webdriver_manager.firefox import GeckoDriverManager
from bs4 import BeautifulSoup
import time
import numpy as np
import cv2
import pyttsx3
import os
import moviepy.editor as mpe

# Function to scrape the news using Selenium and BeautifulSoup
def fetch_news():
    print("Fetching news...")  # Debugging statement
    try:
        # Set up Selenium with Firefox WebDriver
        driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()))
        driver.get("https://www.bbc.com/news")
        
        # Wait for the page to load fully
        time.sleep(20)  # Increased wait time to 20 seconds
        
        # Get the page source and parse it with BeautifulSoup
        soup = BeautifulSoup(driver.page_source, "html.parser")
        
        # Fetching news articles based on the updated structure
        articles = soup.find_all('h2', {"data-testid": "card-headline"}, limit=3)
        news = []
        for article in articles:
            title = article.text if article else "No title available."
            description = article.find_next('p').text if article.find_next('p') else "No description available."
            news.append((title, description))
            print(f"Title: {title}")  # Print fetched title for debugging
            print(f"Description: {description}")
        
        # Close the browser
        driver.quit()
        
        return news
    except Exception as e:
        print(f"Failed to fetch news: {e}")  # Debugging statement
        return [("Error", f"Failed to fetch news: {e}")]

# Function to convert text to speech and save as audio files
def text_to_speech(news):
    engine = pyttsx3.init()
    audio_files = []
    for i, (title, description) in enumerate(news):
        text = f"{title}. {description}"
        audio_path = f"news_{i + 1}.wav"
        engine.save_to_file(text, audio_path)
        audio_files.append(audio_path)
    engine.runAndWait()
    return audio_files

# Function to generate the news video
def generate_video(news, audio_files):
    # Set up video parameters
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Codec for MP4
    fps = 24  # Frames per second
    frame_size = (640, 480)  # Frame size (width, height)
    word_duration = 14  # Duration for each paragraph in seconds
    num_frames_per_word = fps * word_duration  # Total number of frames per word
    num_frames = num_frames_per_word * len(news)  # Total frames for all news

    # Create a VideoWriter object
    video_path = 'news_video.mp4'
    out = cv2.VideoWriter(video_path, fourcc, fps, frame_size)

    # Generate synthetic frames
    for i in range(num_frames):
        # Create a blank canvas (frame)
        frame = np.zeros((480, 640, 3), dtype=np.uint8)

        # Calculate which paragraph should be displayed
        paragraph_index = i // num_frames_per_word
        title, description = news[paragraph_index]
        text = f"{title}: {description}"

        # Add the text to the frame
        font = cv2.FONT_HERSHEY_SIMPLEX
        font_scale = 0.7
        font_thickness = 2
        wrapped_text = "\n".join([line.strip() for line in text.split('.')])  # Wrap text by sentences
        y0, dy = 50, 25  # Start position and line height
        for j, line in enumerate(wrapped_text.splitlines()):
            text_size = cv2.getTextSize(line, font, font_scale, font_thickness)[0]
            text_x = int((frame_size[0] - text_size[0]) / 2)
            text_y = y0 + j * dy
            cv2.putText(frame, line, (text_x, text_y), font, font_scale, (255, 255, 255), font_thickness, lineType=cv2.LINE_AA)

        # Write the frame to the video
        out.write(frame)

    # Release the video writer
    out.release()

    # Combine the video and audio using moviepy
    video_clip = mpe.VideoFileClip(video_path)

    # Load and set the audio files to the respective portions of the video
    audio_clips = [mpe.AudioFileClip(audio) for audio in audio_files]

    # Define the start time of each paragraph's audio
    audio_start_times = [i * word_duration for i in range(len(news))]

    # Add the audio clips to the video at the correct time
    final_audio = mpe.CompositeAudioClip([
        audio_clips[i].set_start(audio_start_times[i])
        for i in range(len(news))
    ])

    # Set the audio to the video clip
    final_clip = video_clip.set_audio(final_audio)

    # Write the final output to a file
    final_clip.write_videofile("final_news_video_with_audio.mp4", codec="libx264", fps=fps)

    # Clean up the temporary audio files
    for audio in audio_files:
        os.remove(audio)

    print("Video with synchronized audio saved successfully.")

# Function to display the news in the GUI
def display_news():
    print("Displaying news...")  # Debugging statement
    
    # Clear any existing content in the news_frame
    for widget in news_frame.winfo_children():
        widget.destroy()
    
    # Fetch the news data
    news_data = fetch_news()
    
    # Convert news to speech
    audio_files = text_to_speech(news_data)
    
    # Generate the video with the news and audio
    generate_video(news_data, audio_files)
    
    # Display the news data in the GUI
    for i, (title, description) in enumerate(news_data):
        title_label = tk.Label(news_frame, text=title, font=("Arial", 14, "bold"))
        title_label.grid(row=i*2, column=0, sticky="w", padx=10, pady=5)
        
        desc_label = tk.Label(news_frame, text=description, wraplength=600, justify="left")
        desc_label.grid(row=i*2+1, column=0, sticky="w", padx=10, pady=5)
    
    print("News displayed!")  # Debugging statement

# Set up the main window
root = tk.Tk()
root.title("Top News")
root.geometry("700x400")

# Create a frame to hold the news
news_frame = tk.Frame(root)
news_frame.pack(fill="both", expand=True)

# Add a "Connect" button to start fetching and displaying the news
connect_button = tk.Button(root, text="Connect", command=display_news, font=("Arial", 12))
connect_button.pack(pady=20)

# Start the GUI loop
root.mainloop()
